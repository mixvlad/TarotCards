#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥ —Ç–∞—Ä–æ - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–æ–ª–æ–¥
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import json
import os
import argparse
from pathlib import Path

class DeckManager:
    def __init__(self, config_path="decks_config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–ª–æ–¥"""
        self.config_path = config_path
        self.config = self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.config_path):
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            print(f"‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
            return {"decks": {}, "default_settings": {}}
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_path}")
    
    def list_decks(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–¥"""
        if not self.config.get('decks'):
            print("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–¥")
            return
        
        print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–¥—ã:")
        print("-" * 50)
        for deck_id, deck_info in self.config['decks'].items():
            print(f"ID: {deck_id}")
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {deck_info['name']}")
            print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {deck_info['description']}")
            print(f"  –ü—É—Ç—å: {deck_info['source_dir']}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: {deck_info['card_count']}")
            print()
    
    def get_deck(self, deck_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–¥–µ"""
        return self.config.get('decks', {}).get(deck_id)
    
    def add_deck(self, deck_id, name, source_dir, description="", card_count=78):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã"""
        if deck_id in self.config.get('decks', {}):
            print(f"‚ö†Ô∏è  –ö–æ–ª–æ–¥–∞ {deck_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã
        base_dir = source_dir
        
        deck_info = {
            "name": name,
            "description": description,
            "source_dir": base_dir,
            "full_size_dir": os.path.join(base_dir, "full"),
            "resized_dirs": {
                "720px": os.path.join(base_dir, "720px"),
                "360px": os.path.join(base_dir, "360px"),
                "thumbs": os.path.join(base_dir, "thumbs")
            },
            "gif_dir": os.path.join(base_dir, "gif"),
            "card_count": card_count,
            "card_format": "jpg",
            "naming_pattern": "*",
            "has_cover": False
        }
        
        if 'decks' not in self.config:
            self.config['decks'] = {}
        
        self.config['decks'][deck_id] = deck_info
        self.save_config()
        
        print(f"‚úÖ –ö–æ–ª–æ–¥–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {deck_id}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        for dir_path in [deck_info['full_size_dir'], deck_info['gif_dir']] + list(deck_info['resized_dirs'].values()):
            os.makedirs(dir_path, exist_ok=True)
            print(f"  üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {dir_path}")
        
        return True
    
    def remove_deck(self, deck_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–µ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã)"""
        if deck_id not in self.config.get('decks', {}):
            print(f"‚ö†Ô∏è  –ö–æ–ª–æ–¥–∞ {deck_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        deck_name = self.config['decks'][deck_id]['name']
        del self.config['decks'][deck_id]
        self.save_config()
        
        print(f"‚úÖ –ö–æ–ª–æ–¥–∞ '{deck_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("   (–§–∞–π–ª—ã –∫–æ–ª–æ–¥—ã –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã)")
        return True
    
    def update_deck(self, deck_id, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–¥–µ"""
        if deck_id not in self.config.get('decks', {}):
            print(f"‚ö†Ô∏è  –ö–æ–ª–æ–¥–∞ {deck_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        for key, value in kwargs.items():
            if key in self.config['decks'][deck_id]:
                self.config['decks'][deck_id][key] = value
        
        self.save_config()
        print(f"‚úÖ –ö–æ–ª–æ–¥–∞ {deck_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    
    def get_default_settings(self, setting_type=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if setting_type:
            return self.config.get('default_settings', {}).get(setting_type)
        return self.config.get('default_settings', {})
    
    def create_processing_script(self, deck_id, operation):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–¥—ã"""
        deck = self.get_deck(deck_id)
        if not deck:
            print(f"‚ö†Ô∏è  –ö–æ–ª–æ–¥–∞ {deck_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        scripts = []
        
        if operation == 'resize':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            for size_name, size_dir in deck['resized_dirs'].items():
                settings = self.get_default_settings('resize')['standard_sizes'].get(size_name, {})
                cmd = f"python scripts/resize_cards.py -s {deck['full_size_dir']} -o {size_dir}"
                
                if settings.get('width'):
                    cmd += f" -w {settings['width']}"
                if settings.get('height'):
                    cmd += f" -H {settings['height']}"
                
                scripts.append(cmd)
        
        elif operation == 'gif':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GIF
            gif_settings = self.get_default_settings('gif')
            
            for gif_type in ['single', 'three', 'celtic', 'telegram']:
                settings = gif_settings.get(gif_type.replace('_', ''), {})
                cmd = f"python scripts/create_tarot_gif.py -s {deck['resized_dirs'].get('720px', deck['full_size_dir'])} -o {deck['gif_dir']} -t {gif_type}"
                
                if gif_type == 'single' and settings:
                    cmd += f" --pool {settings.get('pool_size', 12)} --frames {settings.get('frames', 12)}"
                elif gif_type == 'three' and settings:
                    cmd += f" --pool {settings.get('pool_size', 12)} --frames {settings.get('frames', 12)}"
                
                scripts.append(cmd)
        
        elif operation == 'convert':
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ JPG
            cmd = f"python scripts/convert_to_jpg.py -d {deck['full_size_dir']}"
            scripts.append(cmd)
        
        if scripts:
            print(f"\nüìù –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–¥—ã '{deck['name']}':")
            print("-" * 50)
            for script in scripts:
                print(script)
            print("-" * 50)
            print("\nüí° –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–¥—ã")
        else:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")

def main():
    parser = argparse.ArgumentParser(
        description='–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥ —Ç–∞—Ä–æ',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–¥—ã
  python deck_manager.py --list
  
  # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É
  python deck_manager.py --add new_deck --name "–ù–æ–≤–∞—è –∫–æ–ª–æ–¥–∞" --source tarot/new_deck
  
  # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ
  python deck_manager.py --info rider-waite
  
  # –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–¥—ã
  python deck_manager.py --deck soimoi --scripts resize
  python deck_manager.py --deck soimoi --scripts gif
  
  # –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  python deck_manager.py --remove old_deck
        """
    )
    
    parser.add_argument('--list', action='store_true',
                        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–¥')
    parser.add_argument('--add', metavar='DECK_ID',
                        help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É')
    parser.add_argument('--name',
                        help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã (–¥–ª—è --add)')
    parser.add_argument('--source',
                        help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–æ–ª–æ–¥–æ–π (–¥–ª—è --add)')
    parser.add_argument('--description',
                        help='–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã (–¥–ª—è --add)')
    parser.add_argument('--remove', metavar='DECK_ID',
                        help='–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--info', metavar='DECK_ID',
                        help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ')
    parser.add_argument('--deck', metavar='DECK_ID',
                        help='ID –∫–æ–ª–æ–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π')
    parser.add_argument('--scripts', choices=['resize', 'gif', 'convert'],
                        help='–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–¥—ã')
    parser.add_argument('--config',
                        default='decks_config.json',
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥
    manager = DeckManager(args.config)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    if args.list:
        manager.list_decks()
    
    elif args.add:
        if not args.name or not args.source:
            print("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è --name –∏ --source")
            return
        
        manager.add_deck(
            deck_id=args.add,
            name=args.name,
            source_dir=args.source,
            description=args.description or ""
        )
    
    elif args.remove:
        manager.remove_deck(args.remove)
    
    elif args.info:
        deck = manager.get_deck(args.info)
        if deck:
            print(f"\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ '{args.info}':")
            print("-" * 50)
            for key, value in deck.items():
                if isinstance(value, dict):
                    print(f"{key}:")
                    for k, v in value.items():
                        print(f"  {k}: {v}")
                else:
                    print(f"{key}: {value}")
        else:
            print(f"‚ùå –ö–æ–ª–æ–¥–∞ {args.info} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    elif args.deck and args.scripts:
        manager.create_processing_script(args.deck, args.scripts)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()