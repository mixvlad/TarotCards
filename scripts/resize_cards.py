#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç —Ç–∞—Ä–æ
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –∫–æ–ª–æ–¥—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã
"""

import os
import argparse
from PIL import Image
from pathlib import Path
import glob

def resize_cards(source_dir, output_dir, target_width=None, target_height=None, 
                 quality=95, preserve_aspect=True):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    
    Args:
        source_dir (str): –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏
        output_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
        target_width (int): –¶–µ–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞
        target_height (int): –¶–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        quality (int): –ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-100)
        preserve_aspect (bool): –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    """
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    supported_formats = ['*.jpg', '*.jpeg', '*.png', '*.gif', '*.bmp']
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = []
    for pattern in supported_formats:
        image_files.extend(glob.glob(os.path.join(source_dir, pattern)))
    
    if not image_files:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ: {source_dir}")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print(f"üìè –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {target_width or '–∞–≤—Ç–æ'}x{target_height or '–∞–≤—Ç–æ'}")
    print("-" * 50)
    
    processed = 0
    errors = 0
    
    for image_path in image_files:
        try:
            filename = os.path.basename(image_path)
            output_path = os.path.join(output_dir, filename)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_path) as img:
                original_width, original_height = img.size
                
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                if preserve_aspect:
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä, –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ç–æ—Ä–æ–π
                    if target_width and not target_height:
                        aspect_ratio = original_height / original_width
                        new_width = target_width
                        new_height = int(target_width * aspect_ratio)
                    elif target_height and not target_width:
                        aspect_ratio = original_width / original_height
                        new_width = int(target_height * aspect_ratio)
                        new_height = target_height
                    elif target_width and target_height:
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                        aspect_ratio = original_width / original_height
                        target_aspect = target_width / target_height
                        
                        if aspect_ratio > target_aspect:
                            new_width = target_width
                            new_height = int(target_width / aspect_ratio)
                        else:
                            new_height = target_height
                            new_width = int(target_height * aspect_ratio)
                    else:
                        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ
                        new_width = original_width
                        new_height = original_height
                else:
                    # –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                    new_width = target_width or original_width
                    new_height = target_height or original_height
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è JPEG)
                if resized.mode in ('RGBA', 'LA', 'P'):
                    rgb_img = Image.new('RGB', resized.size, (255, 255, 255))
                    if resized.mode == 'RGBA':
                        rgb_img.paste(resized, mask=resized.split()[-1])
                    else:
                        rgb_img.paste(resized)
                    resized = rgb_img
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                if filename.lower().endswith(('.jpg', '.jpeg')):
                    resized.save(output_path, 'JPEG', quality=quality, optimize=True)
                else:
                    resized.save(output_path)
                
                print(f"‚úÖ {filename}: {original_width}x{original_height} ‚Üí {new_width}x{new_height}")
                processed += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
            errors += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} —Ñ–∞–π–ª–æ–≤")
    if errors > 0:
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    print("=" * 50)

def main():
    parser = argparse.ArgumentParser(
        description='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç —Ç–∞—Ä–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç Rider-Waite –¥–æ —à–∏—Ä–∏–Ω—ã 720px
  python resize_cards.py --source tarot/rider-waite/full --output tarot/rider-waite/720px --width 720
  
  # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç Soimoi –¥–æ 400x600 –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
  python resize_cards.py -s tarot/soimoi/full -o tarot/soimoi/resized -w 400 -h 600 --no-preserve-aspect
  
  # –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã –≤—ã—Å–æ—Ç–æ–π 200px —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85%
  python resize_cards.py -s tarot/rider-waite/full -o tarot/rider-waite/thumbs --height 200 -q 85
        """
    )
    
    parser.add_argument('-s', '--source', required=True,
                        help='–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏')
    parser.add_argument('-o', '--output', required=True,
                        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('-w', '--width', type=int,
                        help='–¶–µ–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö')
    parser.add_argument('-H', '--height', type=int,
                        help='–¶–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö')
    parser.add_argument('-q', '--quality', type=int, default=95,
                        help='–ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 95)')
    parser.add_argument('--no-preserve-aspect', action='store_true',
                        help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not os.path.exists(args.source):
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.source}")
        return
    
    if not args.width and not args.height:
        print("‚ö†Ô∏è  –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --width –∏/–∏–ª–∏ --height")
        return
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    resize_cards(
        source_dir=args.source,
        output_dir=args.output,
        target_width=args.width,
        target_height=args.height,
        quality=args.quality,
        preserve_aspect=not args.no_preserve_aspect
    )

if __name__ == "__main__":
    main()