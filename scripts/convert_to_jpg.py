#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç JPG
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –∫–æ–ª–æ–¥—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""

import os
import glob
import argparse
from PIL import Image
from pathlib import Path

def convert_to_jpg(directory_path, quality=95, keep_originals=False):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç JPG
    
    Args:
        directory_path (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    supported_formats = ['*.png', '*.PNG', '*.gif', '*.GIF', '*.bmp', '*.BMP', 
                        '*.tiff', '*.TIFF', '*.tif', '*.TIF', '*.webp', '*.WEBP']
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    converted_count = 0
    deleted_count = 0
    already_jpg_count = 0
    error_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    all_image_files = []
    for pattern in supported_formats:
        all_image_files.extend(glob.glob(os.path.join(directory_path, pattern)))
    
    if not all_image_files:
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ: {directory_path}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JPG —Ñ–∞–π–ª—ã
        jpg_files = glob.glob(os.path.join(directory_path, "*.jpg")) + \
                   glob.glob(os.path.join(directory_path, "*.JPG")) + \
                   glob.glob(os.path.join(directory_path, "*.jpeg")) + \
                   glob.glob(os.path.join(directory_path, "*.JPEG"))
        if jpg_files:
            print(f"–í –ø–∞–ø–∫–µ —É–∂–µ –µ—Å—Ç—å {len(jpg_files)} JPG —Ñ–∞–π–ª–æ–≤")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_image_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print("-" * 50)
    
    for image_path in all_image_files:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            file_name = Path(image_path).stem
            output_path = os.path.join(directory_path, f"{file_name}.jpg")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ JPG –≤–µ—Ä—Å–∏—è
            if os.path.exists(output_path):
                print(f"‚ö†Ô∏è  JPG –≤–µ—Ä—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_name}.jpg")
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
                if not keep_originals:
                    os.remove(image_path)
                    print(f"   –£–¥–∞–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(image_path)}")
                    deleted_count += 1
                continue
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ (RGBA, P, –∏ —Ç.–¥.)
                if img.mode not in ('RGB', 'L'):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª, —Å–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                    if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):
                        # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                        background = Image.new('RGB', img.size, (255, 255, 255))
                        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –±–µ–ª—ã–π —Ñ–æ–Ω
                        if img.mode == 'P':
                            img = img.convert('RGBA')
                        background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                        img = background
                    else:
                        img = img.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPG —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                img.save(output_path, 'JPEG', quality=quality, optimize=True)
                print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(image_path)} ‚Üí {file_name}.jpg")
                converted_count += 1
                
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
                if not keep_originals:
                    os.remove(image_path)
                    print(f"   –£–¥–∞–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(image_path)}")
                    deleted_count += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {os.path.basename(image_path)}: {e}")
            error_count += 1
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ JPG —Ñ–∞–π–ª—ã
    jpg_files = glob.glob(os.path.join(directory_path, "*.jpg")) + \
               glob.glob(os.path.join(directory_path, "*.JPG"))
    already_jpg_count = len(jpg_files) - converted_count
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 50)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {converted_count}")
    if not keep_originals and deleted_count > 0:
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    if already_jpg_count > 0:
        print(f"üìÅ –£–∂–µ –±—ã–ª–∏ –≤ JPG —Ñ–æ—Ä–º–∞—Ç–µ: {already_jpg_count}")
    if error_count > 0:
        print(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {error_count}")
    print(f"üìä –í—Å–µ–≥–æ JPG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(jpg_files)}")
    print("=" * 50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ JPG —Ñ–æ—Ä–º–∞—Ç',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ soimoi
  python convert_to_jpg.py --dir tarot/soimoi/full
  
  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
  python convert_to_jpg.py -d tarot/new_deck/images --quality 90
  
  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
  python convert_to_jpg.py -d tarot/backup --keep-originals
        """
    )
    
    parser.add_argument('-d', '--dir', '--directory', 
                        default="tarot/soimoi/full",
                        help='–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: tarot/soimoi/full)')
    parser.add_argument('-q', '--quality', type=int, default=95,
                        help='–ö–∞—á–µ—Å—Ç–≤–æ JPG (1-100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 95)')
    parser.add_argument('--keep-originals', action='store_true',
                        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–µ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(args.dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.dir}")
        return
    
    print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {args.dir}")
    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ JPG: {args.quality}%")
    if args.keep_originals:
        print("üìÅ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    print("=" * 50)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    convert_to_jpg(args.dir, args.quality, args.keep_originals)
    
    print("\n‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()